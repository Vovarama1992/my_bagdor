import { PrismaService } from '../src/PrismaModule/prisma.service';
import { ConfigService } from '@nestjs/config';
import { DbRegion } from '@prisma/client';
import * as bcrypt from 'bcryptjs';

async function main() {
  const configService = new ConfigService();
  const prismaService = new PrismaService(configService); // üîπ –ü–µ—Ä–µ–¥–∞–µ–º ConfigService

  const adminEmail = 'vovvarls@gmail.com';
  const adminPhone = '+79684042508';
  const adminPassword = 'Bfoan3592_';
  const dbRegion: DbRegion = 'RU'; // üîπ –£–∫–∞–∂–∏, –≤ –∫–∞–∫—É—é –ë–î –¥–æ–±–∞–≤–ª—è—Ç—å ('RU', 'OTHER', 'PENDING')

  console.log(`‚è≥ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ ${dbRegion}...`);
  const prisma = prismaService.getDatabase(dbRegion);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–¥–º–∏–Ω
  const existingAdmin = await prisma.user.findFirst({
    where: {
      OR: [{ email: adminEmail }, { phone: adminPhone }],
      accountType: 'ADMIN',
    },
  });

  if (existingAdmin) {
    console.log(
      `‚úÖ –ê–¥–º–∏–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ ${dbRegion}: ${existingAdmin.email}`,
    );
    return;
  }

  // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
  const hashedPassword = await bcrypt.hash(adminPassword, 10);

  // –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∞
  const newAdmin = await prisma.user.create({
    data: {
      email: adminEmail,
      phone: adminPhone,
      nickname: 'vokevo',
      firstName: 'Admin',
      lastName: 'User',
      password: hashedPassword,
      accountType: 'ADMIN',
      isEmailVerified: true,
      isPhoneVerified: true,
      isRegistered: true,
      dbRegion: dbRegion,
    },
  });

  console.log(`‚úÖ –ê–¥–º–∏–Ω —Å–æ–∑–¥–∞–Ω –≤ ${dbRegion}: ${newAdmin.email}`);

  await prismaService.onModuleDestroy(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
}

main().catch((e) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–¥–º–∏–Ω–∞:', e);
});
