import { Module, Logger } from '@nestjs/common';
import { JwtModule as NestJwtModule } from '@nestjs/jwt';
import { ConfigModule, ConfigService } from '@nestjs/config';

@Module({
  imports: [
    ConfigModule,
    NestJwtModule.registerAsync({
      imports: [ConfigModule],
      useFactory: async (configService: ConfigService) => {
        const jwtSecret = configService.get<string>('JWT_SECRET');

        const logger = new Logger('JwtModule');
        logger.log(
          `üîë JWT_SECRET (–∏–∑ ConfigService): ${jwtSecret || '–ù–ï –ù–ê–ô–î–ï–ù'}`,
        );

        if (!jwtSecret) {
          logger.error('‚ùå JWT_SECRET –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ .env!');
          throw new Error('‚ùå JWT_SECRET –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ .env!');
        }

        return {
          secret: jwtSecret, // üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ `secret` –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è
          signOptions: { expiresIn: '24h' },
        };
      },
      inject: [ConfigService],
    }),
  ],
  exports: [NestJwtModule],
})
export class JwtModule {}
