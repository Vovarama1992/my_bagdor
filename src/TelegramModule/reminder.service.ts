import { Injectable, Logger, OnModuleInit } from '@nestjs/common';
import { Telegraf, Markup } from 'telegraf';
import { CronJob } from 'cron';

@Injectable()
export class PostureReminderService implements OnModuleInit {
  private readonly logger = new Logger(PostureReminderService.name);
  private readonly bot: Telegraf;
  private readonly userChatId = 6789440333;
  private postureResponses = { yes: 0, no: 0 };

  constructor() {
    const botToken = '7761692525:AAEvVhZya13'; // –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω

    this.bot = new Telegraf(botToken);

    this.bot.action('posture_yes', async (ctx) => {
      this.postureResponses.yes += 1;
      await ctx.answerCbQuery('–û—Ç–ª–∏—á–Ω–æ! –î–µ—Ä–∂–∏ —Å–ø–∏–Ω—É —Ä–æ–≤–Ω–æ üëç');
      await ctx.deleteMessage();
    });

    this.bot.action('posture_no', async (ctx) => {
      this.postureResponses.no += 1;
      await ctx.answerCbQuery('–ü–æ—Å—Ç–∞—Ä–∞–π—Å—è –¥–µ—Ä–∂–∞—Ç—å —Å–ø–∏–Ω—É –ø—Ä—è–º–æ!');
      await ctx.deleteMessage();
    });
  }

  onModuleInit() {
    this.bot.launch();

    const reminderJob = new CronJob(
      '0 10-23 * * *',
      this.sendReminder.bind(this),
      null,
      true,
      'Asia/Barnaul',
    );
    const summaryJob = new CronJob(
      '59 23 * * *',
      this.sendDailySummary.bind(this),
      null,
      true,
      'Asia/Barnaul',
    );

    reminderJob.start();
    summaryJob.start();

    this.logger.log('Posture Reminder Bot started');
  }

  private async sendReminder() {
    const question = '–í–æ–≤–∞, —Ç—ã –¥–µ—Ä–∂–∏—à—å –≤ —Ç–µ–∫—É—â–µ–º –º–æ–º–µ–Ω—Ç–µ —Å–ø–∏–Ω—É –ø—Ä—è–º–æ?';

    await this.bot.telegram.sendMessage(
      this.userChatId,
      question,
      Markup.inlineKeyboard([
        Markup.button.callback('‚úÖ –î–∞', 'posture_yes'),
        Markup.button.callback('‚ùå –ù–µ—Ç', 'posture_no'),
      ]),
    );
  }

  private async sendDailySummary() {
    const total = this.postureResponses.yes + this.postureResponses.no;
    const message = `üìä –ò—Ç–æ–≥–∏ –¥–Ω—è:\n‚úÖ –î–∞: ${this.postureResponses.yes}\n‚ùå –ù–µ—Ç: ${this.postureResponses.no}\nüìå –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${
      total ? ((this.postureResponses.yes / total) * 100).toFixed(1) : '0'
    }%`;

    await this.bot.telegram.sendMessage(this.userChatId, message);

    this.postureResponses = { yes: 0, no: 0 };
  }
}
