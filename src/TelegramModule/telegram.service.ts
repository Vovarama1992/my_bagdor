import { Injectable, Logger } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { Telegraf, Markup, Context } from 'telegraf';
import { PrismaService } from 'src/PrismaModule/prisma.service';
import { ModerationService } from './moderation.service';

@Injectable()
export class TelegramService {
  private readonly logger = new Logger(TelegramService.name);
  private readonly bot: Telegraf;
  private readonly moderatorChatId: string;

  constructor(
    private configService: ConfigService,
    private prisma: PrismaService,
    private moderationService: ModerationService,
  ) {
    const botToken = this.configService.get<string>('TELEGRAM_BOT_TOKEN');
    this.moderatorChatId = this.configService.get<string>('TELEGRAM_CHAT_ID');

    if (!botToken || !this.moderatorChatId) {
      this.logger.warn('Telegram bot credentials are missing in .env');
      return;
    }

    this.bot = new Telegraf(botToken);
    this.logger.log('Telegram bot initialized');

    this.bot.start(async (ctx) => {
      await this.showMainMenu(ctx);
    });

    this.bot.action('moderate_reviews', async (ctx) => {
      await this.moderationService.sendPendingReviews(ctx);
    });

    this.bot.action('moderate_orders', async (ctx) => {
      await this.moderationService.sendPendingOrders(ctx);
    });

    this.bot.action('moderate_flights', async (ctx) => {
      await this.moderationService.sendPendingFlights(ctx);
    });

    this.bot.action(
      /^approve_(flight|review|order)_(\d+)_(\w+)$/,
      async (ctx) => {
        const [, type, itemId, dbRegion] = ctx.match;
        this.logger.log(`Approving ${type} ${itemId} in ${dbRegion}`);
        await this.moderationService.approveItem(
          type,
          Number(itemId),
          dbRegion,
        );
        await ctx.editMessageText(
          `‚úÖ ${type.toUpperCase()} ${itemId} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω`,
          {
            parse_mode: 'Markdown',
          },
        );
      },
    );

    this.bot.action(
      /^reject_(flight|review|order)_(\d+)_(\w+)$/,
      async (ctx) => {
        const [, type, itemId, dbRegion] = ctx.match;
        this.logger.log(`Rejecting ${type} ${itemId} in ${dbRegion}`);
        await this.moderationService.rejectItem(type, Number(itemId), dbRegion);
        await ctx.editMessageText(
          `‚ùå ${type.toUpperCase()} ${itemId} –æ—Ç–∫–ª–æ–Ω–µ–Ω`,
          {
            parse_mode: 'Markdown',
          },
        );
      },
    );

    this.bot.launch();
  }

  async showMainMenu(ctx: Context) {
    const pendingCounts = await this.moderationService.getPendingCounts();
    await ctx.reply(
      'üìå *–ú–µ–Ω—é –º–æ–¥–µ—Ä–∞—Ü–∏–∏*',
      Markup.inlineKeyboard([
        [
          Markup.button.callback(
            `üìú –û—Ç–∑—ã–≤—ã (${pendingCounts.reviews})`,
            'moderate_reviews',
          ),
        ],
        [
          Markup.button.callback(
            `üì¶ –ó–∞–∫–∞–∑—ã (${pendingCounts.orders})`,
            'moderate_orders',
          ),
        ],
        [
          Markup.button.callback(
            `‚úàÔ∏è –†–µ–π—Å—ã (${pendingCounts.flights})`,
            'moderate_flights',
          ),
        ],
      ]),
    );
  }

  async sendFlightForModeration(
    flightId: number,
    dbRegion: string,
  ): Promise<void> {
    const db = this.prisma.getDatabase(dbRegion);
    const flight = await db.flight.findUnique({ where: { id: flightId } });
    if (!flight) return;

    const message = `‚úàÔ∏è *–ù–æ–≤—ã–π —Ä–µ–π—Å –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏*\nüìç –û—Ç–∫—É–¥–∞: ${flight.departure}\nüìç –ö—É–¥–∞: ${flight.arrival}\nüìÖ –î–∞—Ç–∞: ${new Date(flight.date).toLocaleString()}`;
    await this.bot.telegram.sendMessage(this.moderatorChatId, message, {
      parse_mode: 'Markdown',
      ...Markup.inlineKeyboard([
        [
          Markup.button.callback(
            '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å',
            `approve_flight_${flight.id}_${dbRegion}`,
          ),
        ],
        [
          Markup.button.callback(
            '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å',
            `reject_flight_${flight.id}_${dbRegion}`,
          ),
        ],
      ]),
    });
  }

  async sendOrderForModeration(
    orderId: number,
    dbRegion: string,
  ): Promise<void> {
    const db = this.prisma.getDatabase(dbRegion);
    const order = await db.order.findUnique({ where: { id: orderId } });
    if (!order) return;

    const message = `üì¶ *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏*\nüìú –û–ø–∏—Å–∞–Ω–∏–µ: ${order.description}\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${order.price} ‚ÇΩ\nüéÅ –í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ: ${order.reward} ‚ÇΩ`;
    await this.bot.telegram.sendMessage(this.moderatorChatId, message, {
      parse_mode: 'Markdown',
      ...Markup.inlineKeyboard([
        [
          Markup.button.callback(
            '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å',
            `approve_order_${order.id}_${dbRegion}`,
          ),
        ],
        [
          Markup.button.callback(
            '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å',
            `reject_order_${order.id}_${dbRegion}`,
          ),
        ],
      ]),
    });
  }

  async sendReviewForModeration(
    reviewId: number,
    dbRegion: string,
  ): Promise<void> {
    const db = this.prisma.getDatabase(dbRegion);
    const review = await db.review.findUnique({ where: { id: reviewId } });
    if (!review) return;

    const message = `üìù *–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏*\n‚≠ê –û—Ü–µ–Ω–∫–∞: ${review.rating}/5\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${review.comment}`;
    await this.bot.telegram.sendMessage(this.moderatorChatId, message, {
      parse_mode: 'Markdown',
      ...Markup.inlineKeyboard([
        [
          Markup.button.callback(
            '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å',
            `approve_review_${review.id}_${dbRegion}`,
          ),
        ],
        [
          Markup.button.callback(
            '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å',
            `reject_review_${review.id}_${dbRegion}`,
          ),
        ],
      ]),
    });
  }
}
