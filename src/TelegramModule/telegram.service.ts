import { Injectable, Logger } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { Telegraf, Markup, Context } from 'telegraf';
import { PrismaService } from 'src/PrismaModule/prisma.service';
import { ModerationService } from './moderation.service';
import {
  InputMediaPhoto,
  InputMediaVideo,
} from 'telegraf/typings/core/types/typegram';

@Injectable()
export class TelegramService {
  private readonly logger = new Logger(TelegramService.name);
  private readonly bot: Telegraf;
  private readonly moderatorChatId: string;

  constructor(
    private configService: ConfigService,
    private prisma: PrismaService,
    private moderationService: ModerationService,
  ) {
    const botToken = this.configService.get<string>('TELEGRAM_BOT_TOKEN');
    this.moderatorChatId = this.configService.get<string>('TELEGRAM_CHAT_ID');

    if (!botToken || !this.moderatorChatId) {
      this.logger.warn('Telegram bot credentials are missing in .env');
      return;
    }

    this.bot = new Telegraf(botToken);
    this.logger.log('Telegram bot initialized');

    this.bot.start(async (ctx) => {
      await this.showMainMenu(ctx);
    });

    this.bot.action(
      /^approve_(order|flight|review)_(\d+)_PENDING$/,
      async (ctx) => {
        const [, type, id] = ctx.match;
        await this.moderationService.approveItem(type, parseInt(id), 'PENDING');
        await ctx.answerCbQuery(
          `‚úÖ ${this.getTypeLabel(type)} #${id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω`,
        );
        await ctx.deleteMessage();
      },
    );

    this.bot.action(
      /^reject_(order|flight|review)_(\d+)_PENDING$/,
      async (ctx) => {
        const [, type, id] = ctx.match;
        await this.moderationService.rejectItem(type, parseInt(id), 'PENDING');
        await ctx.answerCbQuery(
          `‚ùå ${this.getTypeLabel(type)} #${id} –æ—Ç–∫–ª–æ–Ω–µ–Ω`,
        );
        await ctx.deleteMessage();
      },
    );

    this.bot.action('moderate_reviews', async (ctx) => {
      await this.moderationService.sendPendingReviews(ctx);
    });

    this.bot.action('moderate_orders', async (ctx) => {
      await this.moderationService.sendPendingOrders(ctx);
    });

    this.bot.action('moderate_flights', async (ctx) => {
      await this.moderationService.sendPendingFlights(ctx);
    });

    this.bot.launch();
  }

  async showMainMenu(ctx: Context) {
    const pendingCounts = await this.moderationService.getPendingCounts();
    await ctx.reply(
      'üìå *–ú–µ–Ω—é –º–æ–¥–µ—Ä–∞—Ü–∏–∏*',
      Markup.inlineKeyboard([
        [
          Markup.button.callback(
            `üìú –û—Ç–∑—ã–≤—ã (${pendingCounts.reviews})`,
            'moderate_reviews',
          ),
        ],
        [
          Markup.button.callback(
            `üì¶ –ó–∞–∫–∞–∑—ã (${pendingCounts.orders})`,
            'moderate_orders',
          ),
        ],
        [
          Markup.button.callback(
            `‚úàÔ∏è –†–µ–π—Å—ã (${pendingCounts.flights})`,
            'moderate_flights',
          ),
        ],
      ]),
    );
  }

  async sendOrderForModeration(
    orderId: number,
    dbRegion: string,
  ): Promise<void> {
    const db = this.prisma.getDatabase(dbRegion);
    const order = await db.order.findUnique({
      where: { id: orderId },
      include: { user: true },
    });
    if (!order) return;

    const message = `üì¶ *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏*
üë§ *–ó–∞–∫–∞–∑—á–∏–∫:* ${order.user.lastName} (ID: ${order.userId})
üìå *–ù–∞–∑–≤–∞–Ω–∏–µ:* ${order.name}
üìë *–¢–∏–ø:* ${this.getOrderTypeLabel(order.type)}
üìú *–û–ø–∏—Å–∞–Ω–∏–µ:* ${order.description}
üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å:* ${order.price} ‚ÇΩ
üéÅ *–í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ:* ${order.reward} ‚ÇΩ
üìÖ *–î–æ—Å—Ç–∞–≤–∫–∞:* ${new Date(order.deliveryStart).toLocaleDateString()} ‚Äì ${new Date(order.deliveryEnd).toLocaleDateString()}
üìç *–ú–∞—Ä—à—Ä—É—Ç:* ${order.departure} ‚Üí ${order.arrival}
üîÑ *–°—Ç–∞—Ç—É—Å:* ${this.getOrderStatusLabel(order.status)}`;

    await this.bot.telegram.sendMessage(
      this.moderatorChatId,
      message,
      Markup.inlineKeyboard([
        [
          Markup.button.callback(
            '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å',
            `approve_order_${order.id}_PENDING`,
          ),
        ],
        [
          Markup.button.callback(
            '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å',
            `reject_order_${order.id}_PENDING`,
          ),
        ],
      ]),
    );

    if (order.mediaUrls.length > 0) {
      const media: (InputMediaPhoto | InputMediaVideo)[] = order.mediaUrls.map(
        (url) => ({
          type: url.endsWith('.mp4') ? 'video' : 'photo',
          media: url,
        }),
      );
      await this.bot.telegram.sendMediaGroup(this.moderatorChatId, media);
    }
  }

  async sendFlightForModeration(
    flightId: number,
    dbRegion: string,
  ): Promise<void> {
    const db = this.prisma.getDatabase(dbRegion);
    const flight = await db.flight.findUnique({
      where: { id: flightId },
      include: { user: true },
    });
    if (!flight) return;

    const message = `‚úàÔ∏è *–ù–æ–≤—ã–π —Ä–µ–π—Å –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏*
üë§ –ü–µ—Ä–µ–≤–æ–∑—á–∏–∫: ${flight.user.lastName} (ID: ${flight.userId})
üìç –û—Ç–∫—É–¥–∞: ${flight.departure}
üìç –ö—É–¥–∞: ${flight.arrival}
üìÖ –î–∞—Ç–∞: ${new Date(flight.date).toLocaleString()}
üí¨ –û–ø–∏—Å–∞–Ω–∏–µ: ${flight.description}
üîÑ *–°—Ç–∞—Ç—É—Å:* ${this.getFlightStatusLabel(flight.status)}`;

    await this.bot.telegram.sendMessage(
      this.moderatorChatId,
      message,
      Markup.inlineKeyboard([
        [
          Markup.button.callback(
            '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å',
            `approve_flight_${flight.id}_PENDING`,
          ),
        ],
        [
          Markup.button.callback(
            '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å',
            `reject_flight_${flight.id}_PENDING`,
          ),
        ],
      ]),
    );

    if (flight.documentUrl) {
      await this.bot.telegram.sendDocument(
        this.moderatorChatId,
        flight.documentUrl,
      );
    }
  }

  async sendReviewForModeration(
    reviewId: number,
    dbRegion: string,
  ): Promise<void> {
    const db = this.prisma.getDatabase(dbRegion);
    const review = await db.review.findUnique({
      where: { id: reviewId },
      include: { fromUser: true, toUser: true },
    });
    if (!review) return;

    const message = `üìù *–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏*
üë§ –û—Ç –∫–æ–≥–æ: ${review.fromUser.lastName} (ID: ${review.fromUserId})
üë§ –ö–æ–º—É: ${review.toUser.lastName} (ID: ${review.toUserId})
‚≠ê –û—Ü–µ–Ω–∫–∞: ${review.rating}/5
üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${review.comment}`;

    await this.bot.telegram.sendMessage(
      this.moderatorChatId,
      message,
      Markup.inlineKeyboard([
        [
          Markup.button.callback(
            '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å',
            `approve_review_${review.id}_PENDING`,
          ),
        ],
        [
          Markup.button.callback(
            '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å',
            `reject_review_${review.id}_PENDING`,
          ),
        ],
      ]),
    );
  }

  private getTypeLabel(type: string): string {
    return type === 'order' ? '–ó–∞–∫–∞–∑' : type === 'flight' ? '–†–µ–π—Å' : '–û—Ç–∑—ã–≤';
  }

  private getOrderTypeLabel(type: string): string {
    return (
      {
        DOCUMENTS: 'üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã',
        STORE_PURCHASE: 'üõç –ü–æ–∫—É–ø–∫–∞ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞',
        PERSONAL_ITEMS: 'üéí –õ–∏—á–Ω—ã–µ –≤–µ—â–∏',
      }[type] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø'
    );
  }

  private getOrderStatusLabel(status: string): string {
    return (
      {
        RAW: 'üü° –ù–æ–≤—ã–π',
        PROCESSED_BY_CUSTOMER: 'üü¢ –í—ã–±—Ä–∞–Ω —Ä–µ–π—Å',
        PROCESSED_BY_CARRIER: 'üîµ –ü—Ä–∏–Ω—è—Ç –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–æ–º',
        CONFIRMED: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
      }[status] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å'
    );
  }

  private getFlightStatusLabel(status: string): string {
    return (
      {
        PENDING: 'üü° –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
        CONFIRMED: 'üü¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
        IN_PROGRESS: 'üõ´ –í –ø—É—Ç–∏',
        ARRIVED: 'üõ¨ –ü—Ä–∏–ª–µ—Ç–µ–ª',
        COMPLETED: '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω',
      }[status] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å'
    );
  }
}
